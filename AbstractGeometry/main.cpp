#include<Windows.h>
#include<iostream>
using namespace std;

#define delimiter "\n-----------------------------------------\n"

namespace Geometry //геометирия помещаем иерархию в глобальное пространство имен
{
	class Shape //класс форма(фигура)
	{
	public:  //так как фигуры разные то определяем общие методы, которые будут подстраиваться под конкретную
		virtual double get_area()const = 0; //площадь, чисто виртуальный метод
		virtual double get_perimeter()const = 0;  //периметр, чисто виртуальный метод
		virtual void draw()const = 0; //рисунокь, чисто виртуальный метод
		virtual void info()const		//виртуальный метод
		{
			cout << "Площадь фигуры: " << get_area() << endl;
			cout << "Периметр фигуры: " << get_perimeter() << endl;
			draw();  //нарисовать
		}
	};

	//////////////////////////////////////////////////////////
	////////////////////фигура квадрат//////////////////////
	class Square :public Shape   //наследует от геометрической фигуры виртальной
	{
		double side;   ///параметр - сторона т.к. у квадрата все стороны равны опреде
	public:
		Square(double side)  //квадрат 
		{
			this->side = side;
		}
		~Square() {}    //деструктор

		double get_side()const //Длина стороны (выводим на экран) квадрата get метод
		{
			return side;   //константный метод
		}
		double get_diagonal()const //диагональ квадрата
		{
			return side * sqrt(2);
			//return sqrt(side*side * 2);
		}
		double get_area()const //метод реализуем определение продащи квадрата
		{
			return side * side;   //площадь = сторона * сторона
		}
		double get_perimeter()const    //метод реализуем определение периметр квадрата
		{
			return side * 4;
		}
		void draw()const   //рисунок квадрат константный метод
		{
			for (int i = 0; i < side; i++)
			{
				for (int i = 0; i < side; i++)
				{
					cout << "* ";
				}
				cout << endl;
			}
		}
		void info()const
		{
			cout << typeid(*this).name() << endl;
			cout << "Длина стороны: " << get_side() << endl;
			cout << "Диагональ: " << get_diagonal() << endl;
			Shape::info();  //вызываем для базового класса 
		}
	};
	/////////////////////класс квадрат окончание/////////////////////////
	//////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	/////////////////////класс прямоуголник////////////////////////////////////
	class Rectangle :public Shape //прямоуголник дочерний класса  фигуры
		{
		double width; ////////////высона
		double length; //длина
	public:
		Rectangle(double width, double length)  //конструктор для прямоугольника
		{ 
			this->width = width;
			this->length = length;
		}
		~Rectangle()  //деструктор
		{

		}
		//////////////////гет методы дял длины и высоты
		double get_width()const
		{
			return width;
		}
		double get_length()const
		{
			return length;
		}
		///////////////////рекализация чисто виртуальыне метода
		double get_area()const
		{
			return width * length;  //площадь прямоугольника
		}
		double get_perimeter()const    //перимерт прямоугольника
		{
			return (width + length) * 2;
		}

		double get_diagonal()const //диагональ прямоугольника
		{
			//return sqrt * (width (2) + length (2));
			//return sqrt(side*side * 2);
		}

		void draw()const  ///нарисовать прямоугольник 
		{
			//WinGDI - Windows Grapics Device Interface технология для рисования
			//подключаем библиотеку Windows.h

			//1) получаем обработчик окна консоли:
			HWND hwnd = GetConsoleWindow();

			//2) получаем контекст устройства для окна консоли:
			//под них выделяются ресурсы
			HDC hdc = GetDC(hwnd);	//контекст устройства - это то, на чем мы будем рисовать
			//теперь нужно определиться с тем, чем мы будем рисовать

			//3) создаем карандаш. карандаш рисует конрут фигуры
			//толщина линии 5  цвет красный 255, синий 0 зеленый 0 получается красный
			HPEN hPen = CreatePen(PS_SOLID, 5, RGB(255, 0, 0));	//PS_SOLID - сплошная линия
			//5 - толщина линии

//4) создаем кисть. кисть выполняет заливку фигуры красным
			HBRUSH hBrush = CreateSolidBrush(RGB(255, 0, 0));

			//5) перед рисованием нужно выбрать чем и на чем мы будем рисовать
			SelectObject(hdc, hPen);
			SelectObject(hdc, hBrush);

			//6) когда все объекты созданы и выбраны можно рисовать нужную нам фигуру,
			//	 при помощи соответствующей функции:
			::Rectangle(hdc, 100, 100, 300, 200); //:: обращение к глобальному пространству имер через ::
			///координаты 
			//7) кисть и карандаш так же нанимают ресурсы поэтому их тоженужно удалить,
			DeleteObject(hPen);
			DeleteObject(hBrush);

			//8) Освобождаем контекст устройства (т.к. ранее под него выделены ресурсы):
			ReleaseDC(hwnd, hdc);
		}
		void info()const  //константный метод
		{
			cout << typeid(*this).name() << endl;
			cout << "ширина прмоугольника: " << get_width() << endl;
			cout << "длина прямоуголника: " << get_length() << endl;
			cout << "диагональ прямоугольника: " << get_diagonal() << endl;
			Shape::info();
		}
	};
}
///////////////конец класса прямоугольник///////////////////////////////
///////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
	/////////////////////класс круг////////////////////////////////////
class Circle :public Shape //круг дочерний класса  фигуры
{
	double radius; ////////////радиус
	
public:
	Circle(double radius)  //конструктор для круг
	{
		this->radius = radius;
		
	}
	~Circle()  //деструктор
	{

	}
	//////////////////гет методы для радиуса
	double get_radius()const
	{
		return radius;
	}
	
	///////////////////рекализация чисто виртуальыне метода
	double get_area()const
	{
		return 3,14 * radius * radius;  //площадь прямоугольника
	}
	double get_perimeter()const    //перимерт прямоугольника
	{
		return (radius * 3,14) * 2;
	}

	

	void draw()const  ///нарисовать круг
	{
		//WinGDI - Windows Grapics Device Interface технология для рисования
		//подключаем библиотеку Windows.h

		//1) получаем обработчик окна консоли:
		HWND hwnd = GetConsoleWindow();

		//2) получаем контекст устройства для окна консоли:
		//под них выделяются ресурсы
		HDC hdc = GetDC(hwnd);	//контекст устройства - это то, на чем мы будем рисовать
		//теперь нужно определиться с тем, чем мы будем рисовать

		//3) создаем карандаш. карандаш рисует конрут фигуры
		//толщина линии 5  цвет красный 255, синий 0 зеленый 0 получается красный
		HPEN hPen = CreatePen(PS_SOLID, 5, RGB(255, 0, 0));	//PS_SOLID - сплошная линия
		//5 - толщина линии

//4) создаем кисть. кисть выполняет заливку фигуры красным
		HBRUSH hBrush = CreateSolidBrush(RGB(255, 0, 0));

		//5) перед рисованием нужно выбрать чем и на чем мы будем рисовать
		SelectObject(hdc, hPen);
		SelectObject(hdc, hBrush);

		//6) когда все объекты созданы и выбраны можно рисовать нужную нам фигуру,
		//	 при помощи соответствующей функции:
	//	::Rectangle(hdc, 100, 100, 300, 200); //:: обращение к глобальному пространству имер через ::
		///координаты 
		//7) кисть и карандаш так же нанимают ресурсы поэтому их тоженужно удалить,
		DeleteObject(hPen);
		DeleteObject(hBrush);

		//8) Освобождаем контекст устройства (т.к. ранее под него выделены ресурсы):
		ReleaseDC(hwnd, hdc);
	}
	void info()const  //константный метод
	{
		cout << typeid(*this).name() << endl;
		cout << "радиус: " << get_radius() << endl;
		
		Shape::info();
	}
};

///////////////конец класса круг///////////////////////////////
///////////////////////////////////////////////////////////////////////


void main()
{
	setlocale(LC_ALL, "");
	//////////////квадрат//////////////////////////////////////
	Geometry::Square square(5); //квадрат фигура
	cout << "Длина стороны квадрата: " << square.get_side() << endl; //гет метод
	cout << "Диагональ квадрата: " << square.get_diagonal() << endl;
	cout << "Площадь квадрата: " << square.get_area() << endl;
	cout << "Периметр квадрата:" << square.get_perimeter() << endl;
	square.draw(); //рисунок квадрата реализация
	cout << delimiter << endl;
	square.info();

	Geometry::Rectangle rect(25, 15);  /////прямоугольник фигура ссылка пространсво имен Geometry::
	rect.info();

	Geometry::Circle rect(25, 15);  /////прямоугольник фигура ссылка пространсво имен Geometry::
	rect.info();
}